/**
 * Generated by @dgwnu/ng-joint-schematics
 * Ng Joint <%= classify(shapeType) %> <%= classify(name) %> Service
 */
import { Injectable, SimpleChanges,  } from '@angular/core';

import { <%= classify(implementation) %>ShapeService } from '../../../<%= dasherize(shapesPath) %>/<%= dasherize(shapesPath) %>';

import { Shapes<%= classify(shapeType) %>Service } from '../../../<%= dasherize(shapesPath) %>/<%= dasherize(shapeType) %>/<%= dasherize(shapesPath) %>-<%= dasherize(shapeType) %>.service';
import { <%= classify(shapeType) %><%= classify(name) %> } from './<%= dasherize(shapeType) %>-<%= dasherize(name) %>';
import { <%= classify(shapeType) %><%= classify(name) %>Component } from './<%= dasherize(shapeType) %>-<%= dasherize(name) %>.component';

@Injectable({
  providedIn: 'root'
})
export class <%= classify(shapeType) %><%= classify(name) %>Service implements <%= classify(implementation) %>ShapeService {

  constructor(private service: Shapes<%= classify(shapeType) %>Service) {}

  shapeOptions(component: <%= classify(shapeType) %><%= classify(name) %>Component): {} {
    return this.service.<%= dasherize(implementation) %>ShapeOptions(component);
  }

  create<%= classify(implementation) %>Shape(id: string,<% if (implementation === 'link') { %> sourceId: string, targetId: string,<% } %> options: {}): <%= classify(shapeType) %><%= classify(name) %> {
    return <%= camelize(name) %>Shape = new <%= classify(shapeType) %><%= classify(name) %>(
      id,<% if (implementation === 'link') { %> sourceId, targetId,<% } %>
      options
    );
  }

  configShape(component: <%= classify(shapeType) %><%= classify(name) %>Component) {
    this.service.config<%= classify(implementation) %>Shape(component);
  }

  onEvents(component: <%= classify(shapeType) %><%= classify(name) %>Component) {
    this.service.on<%= classify(implementation) %>Events(component);
  }

  setChanges(changes: SimpleChanges, component: <%= classify(shapeType) %><%= classify(name) %>Component) {
    this.service.set<%= classify(implementation) %>Changes(changes, component);
  }

}
